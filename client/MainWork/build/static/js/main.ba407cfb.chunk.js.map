{"version":3,"sources":["config.js","Marketplace.js","create-item.js","XplayVid.js","my-nfts.js","Nav.js","index.tsx"],"names":["nftmarketaddress","nftaddress","rpcEndpoint","Home","useState","nfts","setNfts","loadingState","setLoadingState","loadNFTs","a","provider","ethers","providers","JsonRpcProvider","tokenContract","Contract","NFT","abi","marketContract","Market","fetchMarketItems","data","Promise","all","map","i","tokenURI","tokenId","tokenUri","axios","get","meta","price","utils","formatUnits","toString","item","itemId","toNumber","seller","owner","image","name","description","items","nft","web3Modal","Web3Modal","connect","connection","Web3Provider","signer","getSigner","contract","parseUnits","createMarketSale","value","transaction","wait","useEffect","length","className","style","maxWidth","src","height","overflow","width","Button","variant","color","onClick","buyNft","client","ipfsHttpClient","history","useHistory","fileUrl","setFileUrl","formInput","updateFormInput","createSale","url","network","cacheProvider","createToken","tx","event","events","args","web3","toWei","listingPrice","createMarketItem","push","e","file","target","files","add","progress","prog","console","log","added","path","JSON","stringify","required","type","placeholder","onChange","alt","XplayVids","props","handleChange","setState","inputvalue","handleSubmit","preventDefault","state","id","classame","onSubmit","this","margin","position","left","display","controls","React","Component","MyNFTS","setSold","loaded","setLoaded","fetchMyNFTs","fromWei","soldItems","filter","sold","Navhan","background","alignItems","justifyContent","padding","to","component","MarketPlace","exact","require","config","ReactDOM","render","StrictMode","Nav","document","getElementById"],"mappings":"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","file":"static/js/main.ba407cfb.chunk.js","sourcesContent":["export const nftmarketaddress = \"0x319D6ee5dC6CbB421f7d54B03C173e5Ec4b3B78e\"\r\nexport const nftaddress = \"0x8Ed46331ef12B9DD3f3B856fD88D52F24CDEdf3F\"","/* eslint-disable jsx-a11y/alt-text */\r\nimport { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport axios from 'axios'\r\nimport Web3Modal from \"web3modal\"\r\nimport Head from 'next/head'\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport {\r\n  nftaddress, nftmarketaddress\r\n} from './config'\r\n\r\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\r\nimport Market from './artifacts/contracts/NFTMarket.sol/NFTMarket.json'\r\nconst rpcEndpoint = 'https://eth-rinkeby.alchemyapi.io/v2/avpSFE4CFF97rciebprxcggQd2cF18mJ'\r\n\r\nexport default function Home() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [loadingState, setLoadingState] = useState('not-loaded')\r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint)\r\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\r\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, provider)\r\n    const data = await marketContract.fetchMarketItems()\r\n\r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenUri)\r\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\r\n      let item = {\r\n        price,\r\n        itemId: i.itemId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        image: meta.data.image,\r\n        name: meta.data.name,\r\n        description: meta.data.description,\r\n      }\r\n      return item\r\n    }))\r\n    setNfts(items)\r\n    setLoadingState('loaded')\r\n  }\r\n  async function buyNft(nft) {\r\n    const web3Modal = new Web3Modal()\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n    const contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\r\n\r\n    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')\r\n    const transaction = await contract.createMarketSale(nftaddress, nft.itemId, {\r\n      value: price\r\n    })\r\n    await transaction.wait()\r\n    loadNFTs()\r\n  }\r\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"px-20 py-10 text-3xl\">No items in marketplace</h1>)\r\n  return (\r\n    <>\r\n\r\n      <Head>\r\n        <title>MetaX | MarketPlace</title>\r\n      </Head>\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"px-4\" style={{ maxWidth: '1400px' }}>\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\r\n            {\r\n              nfts.map((nft, i) => (\r\n                <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                  <img src={nft.image} />\r\n                  <div className=\"p-4\">\r\n                    <p style={{ height: '50px' }} className=\"text-2xl font-semibold\">{nft.name}</p>\r\n                    <div style={{ height: '60x', overflow: 'hidden' }}>\r\n                      <p className=\"text-gray-400\">{nft.description}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex flex-row p-4 bg-black\">\r\n                    <p className=\"text-2xl font-bold text-white\">Price - {nft.price}&nbsp; </p>\r\n                    <img height=\"15px\" width='15px' src='https://www.cryptologos.cc/logos/ethereum-eth-logo.svg?v=014' />\r\n                  </div>\r\n                  <Button variant=\"contained\" color=\"primary\" className=\"w-full bg-blue-500 text-white font-bold py-2 px-12 rounded\" onClick={() => buyNft(nft)}>Buy</Button>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport { ethers } from 'ethers'\r\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\r\nimport Web3Modal from 'web3modal'\r\nimport web3 from 'web3'\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\nimport {\r\n  nftaddress, nftmarketaddress\r\n} from './config'\r\n\r\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\r\nimport Market from './artifacts/contracts/NFTMarket.sol/NFTMarket.json'\r\n\r\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\r\n\r\nexport default function Home() {\r\n  let history = useHistory();\r\n  const [fileUrl, setFileUrl] = useState(null)\r\n  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })\r\n \r\n\r\n  async function createSale(url) {\r\n    const web3Modal = new Web3Modal({\r\n      network: \"mainnet\",\r\n      cacheProvider: true,\r\n    });\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n\r\n    let contract = new ethers.Contract(nftaddress, NFT.abi, signer)\r\n    let transaction = await contract.createToken(url)\r\n    let tx = await transaction.wait()\r\n    let event = tx.events[0]\r\n    let value = event.args[2]\r\n    let tokenId = value.toNumber()\r\n    const price = web3.utils.toWei(formInput.price, 'ether')\r\n\r\n    const listingPrice = web3.utils.toWei('0.01', 'ether')\r\n\r\n    contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\r\n    transaction = await contract.createMarketItem(nftaddress, tokenId, price, { value: listingPrice })\r\n\r\n    await transaction.wait()\r\n    // eslint-disable-next-line no-restricted-globals\r\n    history.push(\"./Marketplace\");\r\n  }\r\n  async function onChange(e) {\r\n    const file = e.target.files[0];\r\n    try {\r\n      const added = await client.add(\r\n        file,\r\n        {\r\n          progress: (prog) => console.log(`received: ${prog}`)\r\n        }\r\n      )\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      setFileUrl(url)\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error);\r\n    }\r\n  }\r\n  async function createMarket() {\r\n    const { name, description, price } = formInput\r\n    if (!name || !description || !price || !fileUrl) return\r\n    console.log(name + \" was created\")\r\n    // first, upload to IPFS\r\n    const data = JSON.stringify({\r\n      name, description, image: fileUrl\r\n    })\r\n    try {\r\n      const added = await client.add(data)\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\r\n      createSale(url)\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center\">\r\n      <div className=\"w-1/2 flex flex-col pb-12\">\r\n        <input\r\n        required\r\n        type='text'\r\n          placeholder=\"NFT Name\"\r\n          className=\"mt-8 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\r\n        />\r\n        <input\r\n         required\r\n         type='text'\r\n          placeholder=\"NFT Description\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\r\n        />\r\n        <div className=\"flex flex-row\">\r\n        <input\r\n         required\r\n         type='number'\r\n          placeholder=\"NFT Price in Eth\"\r\n          className=\"mt-2 border rounded p-4\"\r\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\r\n        />\r\n         <img alt=\"\" height=\"30px\" width='30px' src='https://www.cryptologos.cc/logos/ethereum-eth-logo.svg?v=014' />\r\n         </div>\r\n        <input\r\n        required\r\n          type=\"file\"\r\n           name=\"NFT\"\r\n          className=\"my-4\"\r\n          onChange={onChange}\r\n        />\r\n        {\r\n          fileUrl && (\r\n            <img alt='' className=\"rounded mt-4\" width=\"350\" src={fileUrl} />\r\n          )\r\n        }\r\n        <br/>\r\n        <Button variant=\"contained\" color=\"primary\"  onClick={createMarket} className=\"mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\">\r\n          Create NFT\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport ReactPlayer from 'react-player';\r\nimport Head from 'next/head'\r\nimport { Button } from '@material-ui/core';\r\n\r\n\r\nclass XplayVids extends React.Component {\r\n\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            inputvalue: \"\",\r\n            url: \"\"\r\n        }\r\n    }\r\n    handleChange = (event) => {\r\n        this.setState({ inputvalue: event.target.value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //  console.log(\"clicked\");\r\n        this.setState({ url: this.state.inputvalue })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Head>\r\n                    <title>MetaX | playvid</title>\r\n                </Head>\r\n                <div id='reactPlayer' className=\"reactPlayer overflow-x-hidden overflow-y-hidden\">\r\n                    <header classame=\"ReactP\">\r\n                        <div>\r\n                            <form onSubmit={this.handleSubmit}>\r\n                                <input onChange={this.handleChange}\r\n                                    required\r\n                                    style={{\r\n                                        margin: '35px',\r\n                                        width: '310px',\r\n                                        height: '50px'\r\n                                    }}\r\n                                    className=\"mt-2 border rounded p-5\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Input video URL\" />\r\n                                <Button variant=\"contained\" color=\"primary\" style={{\r\n                                    margin: '40px',\r\n\r\n                                }} className=\"overflow-x-hidden overflow-y-hidden hover:bg-black-500 rounded bg-blue-600 py-2 px-12 text-white m-16\">Play Video</Button>\r\n                            </form>\r\n                            <p style={{\r\n                                overflow: 'hidden',\r\n                                // display: 'flex',\r\n                                position: 'relative',\r\n                                left: '30px'\r\n                            }}\r\n                            >NOTE: The url of the video must be correct and surpported, if not it may cause the system to crash.</p>\r\n                            <p style={{\r\n\r\n                                position: 'relative',\r\n                                left: '30px'\r\n                            }}\r\n                            >Supported URL includes YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion and Kaltura. </p>\r\n\r\n                        </div>\r\n                        <ReactPlayer\r\n\r\n                            width='700px'\r\n                            height='400px'\r\n                            style={{\r\n                                margin: '50px',\r\n                                display: 'flex',\r\n                                left: '40px'\r\n                            }}\r\n\r\n                            controls\r\n                            url={this.state.url} />\r\n                    </header >\r\n\r\n                </div >\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default XplayVids;\r\n","import { ethers } from 'ethers'\r\nimport { useEffect, useState } from 'react'\r\nimport { Button } from '@material-ui/core';\r\nimport web3 from 'web3'\r\nimport axios from 'axios'\r\nimport Web3Modal from \"web3modal\"\r\nimport Head from 'next/head'\r\n\r\n\r\nimport {\r\n  nftmarketaddress, nftaddress\r\n} from './config'\r\n\r\nimport Market from './artifacts/contracts/NFTMarket.sol/NFTMarket.json'\r\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\r\n\r\nexport default function MyNFTS() {\r\n  const [nfts, setNfts] = useState([])\r\n  const [sold, setSold] = useState([])\r\n  const [loaded, setLoaded] = useState('not-loaded')\r\n  useEffect(() => {\r\n    loadNFTs()\r\n  }, [])\r\n  async function loadNFTs() {\r\n    const web3Modal = new Web3Modal({\r\n      network: \"mainnet\",\r\n      cacheProvider: true,\r\n    })\r\n    const connection = await web3Modal.connect()\r\n    const provider = new ethers.providers.Web3Provider(connection)\r\n    const signer = provider.getSigner()\r\n\r\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\r\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\r\n    const data = await marketContract.fetchMyNFTs()\r\n\r\n    const items = await Promise.all(data.map(async i => {\r\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\r\n      const meta = await axios.get(tokenUri)\r\n      let price = web3.utils.fromWei(i.price.toString(), 'ether');\r\n      let item = {\r\n        price,\r\n        tokenId: i.tokenId.toNumber(),\r\n        seller: i.seller,\r\n        owner: i.owner,\r\n        image: meta.data.image,\r\n      }\r\n      return item\r\n    }))\r\n    console.log('items: ', items)\r\n    const soldItems = items.filter(i => i.sold)\r\n    setSold(soldItems)\r\n    setNfts(items)\r\n    setLoaded('loaded')\r\n  }\r\n  if (loaded === 'loaded' && !nfts.length) return (<h1 className=\"py-10 px-20 text-3xl\">You currently own no asset!</h1>)\r\n  //if (loaded === 'not-loaded' && !nfts.length) return (<Button onClick={loadNFTs} className=\"rounded bg-blue-600 py-2 px-12 text-white m-16\">Fetch NFTs</Button>)\r\n  return (\r\n    <div>\r\n\r\n      <Head>\r\n        <title>MetaX | MyNft</title>\r\n      </Head>\r\n      <div className=\"flex justify-center\">\r\n        <div className=\"p-4\">\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\r\n            {\r\n              nfts.map((nft, i) => (\r\n                <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\r\n                  <img src={nft.image} className=\"rounded\" />\r\n                  <div className=\"flex flex-row p-4 bg-black\">\r\n                    <p className=\"text-2xl font-bold text-white\">Price - {nft.price}&nbsp; </p>\r\n                    <img height=\"15px\" width='15px' src='https://www.cryptologos.cc/logos/ethereum-eth-logo.svg?v=014' />\r\n                  </div>\r\n                </div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","//import './styles/global.css'\nimport {\n    Link,\n    BrowserRouter,\n \n    Route,\n    \n    Switch,\n  } from 'react-router-dom'\nimport MarketPlace from \"./Marketplace\"\nimport Home from './create-item'\nimport XplayVids from './XplayVid'\nimport MyNFTS from './my-nfts'\n\n\nfunction Navhan(){\n\n  return (\n      <>\n      \n      <BrowserRouter>\n      <div className=\"App overflow-visible\" style={{\n        height: '65px',\n        display: 'flex',\n        background: '#ffd429',\n        color: '#ffd429',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      }}>\n          <div>\n        {/*  <img width={200} height={200} src=\"/Meta.png\" /> */}\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700 md:text-xl\" to= './Marketplace'><b>MarketPlace</b></Link>\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700 md:text-xl\" to= './create-item'><b>Create NFts</b></Link>\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700  md:text-xl\" to= './XplayVid'><b>Play Vids</b></Link>\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700 md:text-xl\" to= './my-nft'><b>My Nfts</b></Link>\n          </div>\n   \n        </div >\n      <div>\n       <Switch>\n          <Route path=\"/login/\" component={MarketPlace} ></Route>\n          <Route path=\"/\" component={Home} exact></Route>\n          <Route path=\"/Marketplace\" component={MarketPlace} ></Route>\n          <Route path=\"/create-item\" component={Home} exact></Route>\n          <Route path=\"/XplayVid\" component={XplayVids} ></Route>\n          <Route path=\"/my-nft\" component={MyNFTS} ></Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n      </>\n  )\n\n}\nexport default Navhan;","import ReactDOM from 'react-dom'\n//import './index.css'\nimport './styles/global.css'\nimport React from 'react'\nimport Navhan from './Nav'\n//import App from './index'\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navhan/>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}