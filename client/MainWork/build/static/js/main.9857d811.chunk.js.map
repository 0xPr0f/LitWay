{"version":3,"sources":["config.js","Marketplace.js","create-item.js","XplayVid.js","my-nfts.js","Nav.js","index.tsx"],"names":["nftmarketaddress","nftaddress","rpcEndpoint","Home","history","useHistory","useState","nfts","setNfts","loadingState","setLoadingState","loadNFTs","a","provider","ethers","providers","JsonRpcProvider","tokenContract","Contract","NFT","abi","marketContract","Market","fetchMarketItems","data","Promise","all","map","i","tokenURI","tokenId","tokenUri","axios","get","meta","price","utils","formatUnits","toString","item","itemId","toNumber","seller","owner","image","name","description","items","nft","web3Modal","Web3Modal","connect","connection","Web3Provider","signer","getSigner","contract","parseUnits","createMarketSale","value","transaction","wait","push","useEffect","length","className","style","maxWidth","src","height","width","overflow","Button","variant","color","onClick","buyNft","client","ipfsHttpClient","fileUrl","setFileUrl","formInput","updateFormInput","createSale","url","network","cacheProvider","createToken","tx","event","events","args","web3","toWei","listingPrice","createMarketItem","e","file","target","files","add","progress","prog","console","log","added","path","JSON","stringify","position","top","left","transform","alt","required","type","placeholder","onChange","TextareaAutosize","XplayVids","props","handleChange","setState","inputvalue","handleSubmit","preventDefault","state","id","classame","onSubmit","this","margin","display","controls","React","Component","MyNFTS","setSold","loaded","setLoaded","fetchMyNFTs","fromWei","soldItems","filter","sold","Navhan","background","alignItems","justifyContent","padding","to","component","MarketPlace","exact","require","config","ReactDOM","render","StrictMode","Nav","document","getElementById"],"mappings":"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","file":"static/js/main.9857d811.chunk.js","sourcesContent":["export const nftmarketaddress = \"0x319D6ee5dC6CbB421f7d54B03C173e5Ec4b3B78e\"\nexport const nftaddress = \"0x8Ed46331ef12B9DD3f3B856fD88D52F24CDEdf3F\"","/* eslint-disable jsx-a11y/alt-text */\nimport { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport axios from 'axios'\nimport Web3Modal from \"web3modal\"\nimport { useHistory } from 'react-router';\nimport Head from 'next/head'\nimport { Button } from '@material-ui/core';\n\nimport {\n  nftaddress, nftmarketaddress\n} from './config'\n\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\nimport Market from './artifacts/contracts/NFTMarket.sol/NFTMarket.json'\nconst rpcEndpoint = 'https://eth-rinkeby.alchemyapi.io/v2/avpSFE4CFF97rciebprxcggQd2cF18mJ'\n\nexport default function Home() {\n  let history = useHistory();\n  const [nfts, setNfts] = useState([])\n  const [loadingState, setLoadingState] = useState('not-loaded')\n  useEffect(() => {\n    loadNFTs()\n  }, [])\n  async function loadNFTs() {\n    const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint)\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, provider)\n    const data = await marketContract.fetchMarketItems()\n\n    const items = await Promise.all(data.map(async i => {\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\n      const meta = await axios.get(tokenUri)\n      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n      let item = {\n        price,\n        itemId: i.itemId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.data.image,\n        name: meta.data.name,\n        description: meta.data.description,\n      }\n      return item\n    }))\n    setNfts(items)\n    setLoadingState('loaded')\n  }\n  async function buyNft(nft) {\n    const web3Modal = new Web3Modal()\n    const connection = await web3Modal.connect()\n    const provider = new ethers.providers.Web3Provider(connection)\n    const signer = provider.getSigner()\n    const contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n\n    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')\n    const transaction = await contract.createMarketSale(nftaddress, nft.itemId, {\n      value: price\n    })\n    await transaction.wait()\n    loadNFTs()\n    history.push(\"./Marketplace\");\n  }\n  if (loadingState === 'loaded' && !nfts.length) return (<h1 className=\"px-20 py-10 text-3xl\">No items in marketplace</h1>)\n  return (\n    <>\n\n      <Head>\n        <title>MetaX | MarketPlace</title>\n      </Head>\n      <div className=\"flex justify-center\">\n        <div className=\"px-4 max-h-80 \" style={{ maxWidth: '1400'}}>\n          <div className=\"max-h-80 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\n            {\n              nfts.map((nft, i) => (\n                <div key={i} className=\"max-h-full border shadow rounded-xl overflow-hidden\">\n                 \n                  <img src={nft.image} style={{ height: '320px', width: '350px' }} />\n                  <div className=\"p-4 max-h-80\">\n                    <p style={{ height: '40px' }} className=\"text-2xl font-semibold\">{nft.name}</p>\n                    <div style={{ height: '40x', overflow: 'hidden' }}>\n                      <p className=\"text-gray-400\">{nft.description}</p>\n                    </div>\n                  </div>\n                  <div className=\"flex flex-row p-4 bg-black\">\n                    <p className=\"text-2xl font-bold text-white\">Price - {nft.price}&nbsp; </p>\n                    <img height=\"15px\" width='15px' src='https://www.cryptologos.cc/logos/ethereum-eth-logo.svg?v=014' />\n                  </div>\n                  <Button variant=\"contained\" color=\"primary\" className=\"w-full bg-blue-500 text-white font-bold py-2 px-12 rounded\" onClick={() => buyNft(nft)}>Buy</Button>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n","import { useState } from 'react'\nimport { Button, TextareaAutosize } from '@material-ui/core';\nimport { ethers } from 'ethers'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport Web3Modal from 'web3modal'\nimport web3 from 'web3'\nimport { useHistory } from 'react-router';\n \n\nimport {\n  nftaddress, nftmarketaddress\n} from './config'\n\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\nimport Market from './artifacts/contracts/NFTMarket.sol/NFTMarket.json'\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nexport default function Home() {\n  let history = useHistory();\n  const [fileUrl, setFileUrl] = useState(null)\n  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })\n \n\n  async function createSale(url) {\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      cacheProvider: true,\n    });\n    const connection = await web3Modal.connect()\n    const provider = new ethers.providers.Web3Provider(connection)\n    const signer = provider.getSigner()\n\n    let contract = new ethers.Contract(nftaddress, NFT.abi, signer)\n    let transaction = await contract.createToken(url)\n    let tx = await transaction.wait()\n    let event = tx.events[0]\n    let value = event.args[2]\n    let tokenId = value.toNumber()\n    const price = web3.utils.toWei(formInput.price, 'ether')\n\n    const listingPrice = web3.utils.toWei('0.01', 'ether')\n\n    contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n    transaction = await contract.createMarketItem(nftaddress, tokenId, price, { value: listingPrice })\n\n    await transaction.wait()\n    // eslint-disable-next-line no-restricted-globals\n    history.push(\"./Marketplace\");\n  }\n  async function onChange(e) {\n    const file = e.target.files[0];\n    try {\n      const added = await client.add(\n        file,\n        {\n          progress: (prog) => console.log(`received: ${prog}`)\n        }\n      )\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\n      setFileUrl(url)\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  }\n  async function createMarket() {\n    const { name, description, price } = formInput\n    if (!name || !description || !price || !fileUrl) return\n    console.log(name + \" was created\")\n    // first, upload to IPFS\n    const data = JSON.stringify({\n      name, description, image: fileUrl\n    })\n    try {\n      const added = await client.add(data)\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`\n      createSale(url)\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  }\n\n  return (\n   <>\n   <div className=\"flex flex-row mt-10\" style ={{ \n     position: 'absolute',\n  top:'50%',\n  left: '40%',\n  transform: 'translate(-50% , -50%)' }}\n   >\n   <div className='mx-10 my-5' style={{ height: '450px', width: '450px' }}>\n      \n   {\n          fileUrl && (\n            <img alt='' className=\"rounded mt-4 float-left\" width=\"500\" src={fileUrl} />\n          )\n        }\n   </div>\n   \n    <div className=\"w-full justify-center\">\n      <div className=\"w-full flex flex-col pb-4\">\n        \n        <input\n        required\n        type='text'\n          placeholder=\"NFT Name\"\n          className=\"mt-8 border rounded p-4 w-48\"\n          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}\n        />\n        <TextareaAutosize\n          placeholder=\"NFT Description\"\n          className=\"mt-2 border rounded p-4\"\n          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}\n        />\n        <div className=\"flex flex-row\">\n        <input\n         required\n         type='number'\n          placeholder=\"NFT Price in Eth\"\n          className=\"mt-2 border rounded p-4 w-48\"\n          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}\n        />\n         <img alt=\"\" height=\"30px\" width='30px' src='https://www.cryptologos.cc/logos/ethereum-eth-logo.svg?v=014' />\n         </div>\n        <input\n        required\n          type=\"file\"\n           name=\"NFT\"\n          className=\"my-4 w-64\"\n          onChange={onChange}\n        />\n       \n        <br/>\n        <Button variant=\"contained\" color=\"primary\"  onClick={createMarket} className=\"mt-4 bg-blue-500 text-white rounded p-4 shadow-lg\">\n          Create NFT\n        </Button>\n        </div>\n      </div>\n     \n    </div>\n   \n      </>\n  )\n}\n","import React from 'react';\nimport ReactPlayer from 'react-player';\nimport Head from 'next/head'\nimport { Button } from '@material-ui/core';\n \n\nclass XplayVids extends React.Component {\n\n\n\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inputvalue: \"\",\n            url: \"\"\n        }\n    }\n    handleChange = (event) => {\n        this.setState({ inputvalue: event.target.value })\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //  console.log(\"clicked\");\n        this.setState({ url: this.state.inputvalue })\n    }\n\n    render() {\n        return (\n            <>\n                <Head>\n                    <title>MetaX | playvid</title>\n                </Head>\n                <div id='reactPlayer' className=\"reactPlayer overflow-x-hidden overflow-y-hidden\">\n                    <header classame=\"ReactP\">\n                        <div>\n                            <form onSubmit={this.handleSubmit}>\n                                <input onChange={this.handleChange}\n                                    required\n                                    style={{\n                                        margin: '35px',\n                                        width: '310px',\n                                        height: '50px'\n                                    }}\n                                    className=\"mt-2 border rounded p-5\"\n                                    type=\"text\"\n                                    placeholder=\"Input video URL\" />\n                                <Button variant=\"contained\" color=\"primary\" style={{\n                                    margin: '40px',\n\n                                }} className=\"overflow-x-hidden overflow-y-hidden hover:bg-black-500 rounded bg-blue-600 py-2 px-12 text-white m-16\">Play Video</Button>\n                            </form>\n                            <p style={{\n                                overflow: 'hidden',\n                                // display: 'flex',\n                                position: 'relative',\n                                left: '30px'\n                            }}\n                            >NOTE: The url of the video must be correct and surpported, if not it may cause the system to crash.</p>\n                            <p style={{\n\n                                position: 'relative',\n                                left: '30px'\n                            }}\n                            >Supported URL includes YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion and Kaltura. </p>\n\n                        </div>\n                        <ReactPlayer\n\n                            width='700px'\n                            height='400px'\n                            style={{\n                                margin: '50px',\n                                display: 'flex',\n                                left: '40px'\n                            }}\n\n                            controls\n                            url={this.state.url} />\n                    </header >\n\n                </div >\n                 \n            </>\n        );\n    }\n}\n\nexport default XplayVids;\n","import { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport web3 from 'web3'\nimport axios from 'axios'\nimport Web3Modal from \"web3modal\"\nimport Head from 'next/head'\n\n\nimport {\n  nftmarketaddress, nftaddress\n} from './config'\n\nimport Market from './artifacts/contracts/NFTMarket.sol/NFTMarket.json'\nimport NFT from './artifacts/contracts/NFT.sol/NFT.json'\n\nexport default function MyNFTS() {\n  const [nfts, setNfts] = useState([])\n  const [sold, setSold] = useState([])\n  const [loaded, setLoaded] = useState('not-loaded')\n  useEffect(() => {\n    loadNFTs()\n  }, [])\n  async function loadNFTs() {\n    const web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      cacheProvider: true,\n    })\n    const connection = await web3Modal.connect()\n    const provider = new ethers.providers.Web3Provider(connection)\n    const signer = provider.getSigner()\n\n    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, signer)\n    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)\n    const data = await marketContract.fetchMyNFTs()\n\n    const items = await Promise.all(data.map(async i => {\n      const tokenUri = await tokenContract.tokenURI(i.tokenId)\n      const meta = await axios.get(tokenUri)\n      let price = web3.utils.fromWei(i.price.toString(), 'ether');\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.data.image,\n      }\n      return item\n    }))\n    console.log('items: ', items)\n    const soldItems = items.filter(i => i.sold)\n    setSold(soldItems)\n    setNfts(items)\n    setLoaded('loaded')\n  }\n  if (loaded === 'loaded' && !nfts.length) return (<h1 className=\"py-10 px-20 text-3xl\">You currently own no asset!</h1>)\n  //if (loaded === 'not-loaded' && !nfts.length) return (<Button onClick={loadNFTs} className=\"rounded bg-blue-600 py-2 px-12 text-white m-16\">Fetch NFTs</Button>)\n  return (\n    <div>\n\n      <Head>\n        <title>MetaX | MyNft</title>\n      </Head>\n      <div className=\"flex justify-center\">\n        <div className=\"p-4\">\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4\">\n            {\n              nfts.map((nft, i) => (\n                <div key={i} className=\"border shadow rounded-xl overflow-hidden\">\n                  <img alt='' style={{ height: '360px', width: '380px' }} src={nft.image} className=\"rounded\" />\n                  <div className=\"flex flex-row p-4 bg-black\">\n                    <p className=\"text-2xl font-bold text-white\">Price - {nft.price}&nbsp; </p>\n                    <img alt='' height=\"15px\" width='15px' src='https://www.cryptologos.cc/logos/ethereum-eth-logo.svg?v=014' />\n                  </div>\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      </div>\n       \n    </div>\n  )\n}","//import './styles/global.css'\nimport {\n    Link,\n    BrowserRouter,\n \n    Route,\n    \n    Switch,\n  } from 'react-router-dom'\nimport MarketPlace from \"./Marketplace\"\nimport Home from './create-item'\nimport XplayVids from './XplayVid'\nimport MyNFTS from './my-nfts'\n\n\nfunction Navhan(){\n\n  return (\n      <>\n      \n      <BrowserRouter>\n      <div className=\"App overflow-visible  top-0 w-full text-center border-b border-grey p-4\" style={{\n        height: '65px',\n        display: 'flex',\n        background: '#ffd429',\n        color: '#ffd429',\n        alignItems: 'center',\n        justifyContent: 'space-between'\n      }}>\n          <div>\n        {/*  <img width={200} height={200} src=\"/Meta.png\" /> */}\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700 md:text-xl\" to= './Marketplace'><b>MarketPlace</b></Link>\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700 md:text-xl\" to= './create-item'><b>Create NFts</b></Link>\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700  md:text-xl\" to= './XplayVid'><b>Play Vids</b></Link>\n          </div>\n          <div>\n          <Link  style={{ padding: '0rem 3rem' }} className=\"text-2xl text-red-700 md:text-xl\" to= './my-nft'><b>My Nfts</b></Link>\n          </div>\n   \n        </div >\n      <div>\n       <Switch>\n          <Route path=\"/login/\" component={MarketPlace} ></Route>\n          <Route path=\"/\" component={Home} exact></Route>\n          <Route path=\"/Marketplace\" component={MarketPlace} ></Route>\n          <Route path=\"/create-item\" component={Home} exact></Route>\n          <Route path=\"/XplayVid\" component={XplayVids} ></Route>\n          <Route path=\"/my-nft\" component={MyNFTS} ></Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n   \n\n      </>\n  )\n\n}\nexport default Navhan;","import ReactDOM from 'react-dom'\n//import './index.css'\nimport './styles/global.css'\nimport React from 'react'\nimport Navhan from './Nav'\n\n//import App from './index'\nrequire('dotenv').config();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Navhan/>\n   \n  </React.StrictMode>,\n  document.getElementById('root'),\n)"],"sourceRoot":""}